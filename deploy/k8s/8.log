Release "trustification" does not exist. Installing it now.
Release "trustification" does not exist. Installing it now.
NAME: trustification
LAST DEPLOYED: Thu May  9 21:15:22 2024
NAMESPACE: xiabai-test
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
appDomain: -xiabai-test.apps.scale.scale.trustification.cloud
eventBus:
  bootstrapServers: infrastructure-kafka:9092
  config:
    mechanism: PLAIN
    password:
      valueFrom:
        secretKeyRef:
          key: client-passwords
          name: infrastructure-kafka-user-passwords
    securityProtocol: SASL_PLAINTEXT
    username: user1
  type: kafka
guac:
  database:
    host: infrastructure-postgresql
    name: guac
    password: guac1234
    sslMode: disable
    username: guac
  initDatabase:
    host: infrastructure-postgresql
    name: postgres
    password:
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: infrastructure-postgresql
    sslMode: disable
    username: postgres
ingress:
  className: openshift-default
kafka:
  controller:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
  enabled: true
  kraft:
    clusterId: 3nA2qspzReOmcxqlkmITAA
  provisioning:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
keycloak:
  auth:
    adminPassword: admin123456
    adminUser: admin
  containerSecurityContext:
    enabled: false
  enabled: true
  ingress:
    annotations:
      route.openshift.io/termination: reencrypt
    enabled: true
    ingressClassName: openshift-default
    servicePort: https
  podSecurityContext:
    enabled: false
  postgresql:
    primary:
      containerSecurityContext:
        enabled: false
      podSecurityContext:
        enabled: false
  production: true
  proxy: reencrypt
  service:
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: sso-tls
  tls:
    enabled: true
    existingSecret: sso-tls
    usePem: true
minio:
  containerSecurityContext:
    enabled: false
  enabled: true
  podSecurityContext:
    enabled: false
  rootPassword: minio123456
modules:
  bombasticWalker:
    sources:
      redhat:
        acceptV3Signatures: true
        fixLicenses: true
        job:
          schedule: 0 * * * *
        signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
        url: https://access.redhat.com/security/data/sbom/beta/
  vexinationWalker:
    sources:
      redhat:
        acceptV3Signatures: true
        ignoreDistributions:
        - https://access.redhat.com/security/data/csaf/v2/advisories/
        job:
          schedule: 0 * * * *
        url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
oidc:
  clients:
    frontend: {}
    testingManager:
      clientSecret:
        value: ca48053c-3b82-4650-a98d-4cace7f2d567
    testingUser:
      clientSecret:
        value: 0e6bf990-43b4-4efb-95d7-b24f2b94a525
    walker:
      clientSecret:
        value: 5460cc91-4e20-4edd-881c-b15b169f8a79
storage:
  accessKey:
    valueFrom:
      secretKeyRef:
        key: root-user
        name: infrastructure-minio
  endpoint: http://infrastructure-minio:9000
  secretKey:
    valueFrom:
      secretKeyRef:
        key: root-password
        name: infrastructure-minio
tracing: {}

COMPUTED VALUES:
appDomain: -xiabai-test.apps.scale.scale.trustification.cloud
bombastic:
  bucket: bombastic
  topics:
    failed: sbom-failed
    indexed: sbom-indexed
    stored: sbom-stored
eventBus:
  bootstrapServers: infrastructure-kafka:9092
  config:
    mechanism: PLAIN
    password:
      valueFrom:
        secretKeyRef:
          key: client-passwords
          name: infrastructure-kafka-user-passwords
    securityProtocol: SASL_PLAINTEXT
    username: user1
  type: kafka
guac:
  database:
    host: infrastructure-postgresql
    name: guac
    password: guac1234
    sslMode: disable
    username: guac
  image:
    name: guac
    pullPolicy: IfNotPresent
    registry: ghcr.io/trustification
    version: v0.3.29
  initDatabase:
    host: infrastructure-postgresql
    name: postgres
    password:
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: infrastructure-postgresql
    sslMode: disable
    username: postgres
image:
  name: trust
  pullPolicy: IfNotPresent
  registry: ghcr.io/bxf12315
  version: latest
index:
  mode: file
  syncInterval: 1m
  writerMemoryBytes: 128MiB
infrastructure:
  port: 9010
ingress:
  className: openshift-default
kafka:
  controller:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
  enabled: true
  kraft:
    clusterId: 3nA2qspzReOmcxqlkmITAA
  provisioning:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
keycloak:
  auth:
    adminPassword: admin123456
    adminUser: admin
  containerSecurityContext:
    enabled: false
  enabled: true
  ingress:
    annotations:
      route.openshift.io/termination: reencrypt
    enabled: true
    ingressClassName: openshift-default
    servicePort: https
  podSecurityContext:
    enabled: false
  postgresql:
    primary:
      containerSecurityContext:
        enabled: false
      podSecurityContext:
        enabled: false
  production: true
  proxy: reencrypt
  service:
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: sso-tls
  tls:
    enabled: true
    existingSecret: sso-tls
    usePem: true
metrics:
  enabled: false
minio:
  containerSecurityContext:
    enabled: false
  enabled: true
  podSecurityContext:
    enabled: false
  rootPassword: minio123456
modules:
  bombasticApi:
    enabled: true
    image: {}
    infrastructure: {}
    ingress: {}
    metrics: {}
    rust: {}
    tracing: {}
  bombasticCollector:
    enabled: true
    image: {}
  bombasticIndexer:
    enabled: true
    image: {}
    infrastructure: {}
    metrics: {}
    rust: {}
    tracing: {}
  bombasticWalker:
    enabled: true
    image: {}
    infrastructure: {}
    rust: {}
    sources:
      redhat:
        acceptV3Signatures: true
        fixLicenses: true
        job:
          schedule: 0 * * * *
        signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
        url: https://access.redhat.com/security/data/sbom/beta/
  documentation:
    enabled: true
    image: {}
    ingress: {}
    resources:
      limits:
        memory: 64Mi
      requests:
        memory: 64Mi
  guacCollectsub:
    enabled: false
    image: {}
  guacGraphql:
    enabled: true
    image: {}
    infrastructure: {}
    metrics: {}
  guacInitDb:
    enabled: true
    image: {}
  initDataset:
    enabled: true
    image: {}
    rust: {}
  integrationTests:
    enabled: false
    image: {}
    rust: {}
  report:
    enabled: true
    image: {}
    infrastructure: {}
    ingress: {}
  spogApi:
    crdaUrl: https://rhda.rhcloud.com/api/v4/analysis
    enabled: true
    image: {}
    infrastructure: {}
    ingress: {}
    metrics: {}
    rust: {}
    tracing: {}
  spogUi:
    enabled: true
    image: {}
    ingress: {}
    resources:
      limits:
        memory: 64Mi
      requests:
        memory: 64Mi
  v11yApi:
    enabled: true
    image: {}
    infrastructure: {}
    ingress: {}
    metrics: {}
    rust: {}
    tracing: {}
  v11yIndexer:
    enabled: true
    image: {}
    infrastructure: {}
    metrics: {}
    rust: {}
    tracing: {}
  v11yWalker:
    enabled: true
    image: {}
    infrastructure: {}
    metrics: {}
    rust: {}
    storageSize: 10Gi
    tracing: {}
  vexinationApi:
    enabled: true
    image: {}
    infrastructure: {}
    ingress: {}
    metrics: {}
    rust: {}
    tracing: {}
  vexinationCollector:
    enabled: true
    image: {}
  vexinationIndexer:
    enabled: true
    image: {}
    infrastructure: {}
    metrics: {}
    rust: {}
    tracing: {}
  vexinationWalker:
    enabled: true
    image: {}
    infrastructure: {}
    rust: {}
    sources:
      redhat:
        acceptV3Signatures: true
        ignoreDistributions:
        - https://access.redhat.com/security/data/csaf/v2/advisories/
        job:
          schedule: 0 * * * *
        url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
oidc:
  clients:
    frontend:
      clientId: frontend
    testingManager:
      clientSecret:
        value: ca48053c-3b82-4650-a98d-4cace7f2d567
    testingUser:
      clientSecret:
        value: 0e6bf990-43b4-4efb-95d7-b24f2b94a525
    walker:
      clientId: walker
      clientSecret:
        value: 5460cc91-4e20-4edd-881c-b15b169f8a79
openshift:
  useServiceCa: true
partOf: trustification
replicas: 1
rust: {}
serviceMonitor:
  enabled: false
storage:
  accessKey:
    valueFrom:
      secretKeyRef:
        key: root-user
        name: infrastructure-minio
  endpoint: http://infrastructure-minio:9000
  secretKey:
    valueFrom:
      secretKeyRef:
        key: root-password
        name: infrastructure-minio
tls: {}
tracing:
  enabled: false
v11y:
  bucket: v11y
  topics:
    failed: v11y-failed
    indexed: v11y-indexed
    stored: v11y-stored
vexination:
  bucket: vexination
  topics:
    failed: vex-failed
    indexed: vex-indexed
    stored: vex-stored
workarounds: {}

HOOKS:
---
# Source: trustification/templates/init/guac/010-ConfigMap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: init-guac-db
  labels:
    app.kubernetes.io/name: init-guac-db
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "0"
    helm.sh/hook-weight: "5"
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-delete-policy: before-hook-creation

data:
  init.sql: |
    -- ensure we have the database
    SELECT 'CREATE DATABASE ' || :'db_name'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = :'db_name')\gexec
    
    -- create the user (if it doesn't exist)
    CREATE OR REPLACE FUNCTION add_user_if_not_exists(username NAME) RETURNS integer
        AS $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_roles
            WHERE rolname = username) THEN

            EXECUTE FORMAT('CREATE ROLE "%I" LOGIN', username);

        END IF;
        RETURN NULL;
    END;
    $$ language plpgsql;

    SELECT add_user_if_not_exists(:'db_user');

    -- now set the password
    ALTER USER :db_user WITH PASSWORD :'db_password';

    -- grant permission to connect
    GRANT CONNECT ON DATABASE :db_name TO :db_user;
    
    -- grant permissions on database
    \connect :db_name
    
    GRANT USAGE ON SCHEMA public TO :db_user;
    
    -- grant on existing tables
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO :db_user;
    
    -- grant on future tables
    ALTER DEFAULT PRIVILEGES
        IN SCHEMA public
        GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO :db_user;
---
# Source: trustification/templates/services/report/030-PersistentVolumeClaim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: report-server
  labels:
    app.kubernetes.io/name: report-server
    app.kubernetes.io/component: report
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "20"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "10Gi"
---
# Source: trustification/templates/init/dataset/020-Job.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: init-dataset
  labels:
    app.kubernetes.io/name: init-dataset
    app.kubernetes.io/component: init
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "2"
    helm.sh/hook-weight: "20"
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation

spec:
  backoffLimit: 1000
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600

  template:
    metadata:
      labels:
        app.kubernetes.io/name: init-dataset
        app.kubernetes.io/component: init
        app.kubernetes.io/instance: trustification

    spec:
          

      restartPolicy: OnFailure

      containers:
        - name: run
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent

          command: ["/usr/bin/bash"]
          args:
            - "-ce"
            - |
              ARGS=""
              if [[ -f /run/secrets/kubernetes.io/serviceaccount/service-ca.crt ]]; then
                ARGS="--sender-root-certificates /run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
              fi
              /trust bombastic walker $ARGS --sink https://bombastic-api.xiabai-test.svc.cluster.local --source file:/data/sbom
              echo SBOM import done
              /trust vexination walker $ARGS --sink https://vexination-api.xiabai-test.svc.cluster.local/api/v1/vex --source file:/data/csaf
              echo CSAF import done

          env:
            
            
            - name: OIDC_PROVIDER_CLIENT_ID
              value: "walker"
            - name: OIDC_PROVIDER_CLIENT_SECRET
              value: 5460cc91-4e20-4edd-881c-b15b169f8a79
            
            - name: OIDC_PROVIDER_ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            
            - name: RUST_LOG
              value: "info"

          volumeMounts:
            
          

      volumes:
---
# Source: trustification/templates/init/guac/020-Job.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: init-guac-db
  labels:
    app.kubernetes.io/name: init-guac-db
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

  annotations:
    
    
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "0"
    helm.sh/hook-weight: "5"
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-delete-policy: before-hook-creation

spec:
  backoffLimit: 1000
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600

  template:
    metadata:
      labels:
            app.kubernetes.io/name: init-guac-db
            app.kubernetes.io/component: guac
            app.kubernetes.io/instance: trustification

    spec:

      restartPolicy: OnFailure
      

      volumes:
        - name: init-data
          configMap:
            name: init-guac-db
        

      containers:
        - name: setup
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
      

          env:
            # connect using the `initDatabase` settings
            
            - name: PGHOST
              value: "infrastructure-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              value: "postgres"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: infrastructure-postgresql
            
            
            - name: PGSSLMODE
              value: disable

            # create a user with the `database` settings
            - name: DB_NAME
              value: "guac"
            - name: DB_USERNAME
              value: "guac"
            - name: DB_PASSWORD
              value: "guac1234"

          volumeMounts:
            - mountPath: /etc/init-data
              name: init-data
            

          command:
            - psql
            - -v
            - ON_ERROR_STOP=1
            - -v
            - db_name=$(DB_NAME)
            - -v
            - db_user=$(DB_USERNAME)
            - -v
            - db_password=$(DB_PASSWORD)
            - -f
            - /etc/init-data/init.sql
MANIFEST:
---
# Source: trustification/templates/services/guac/graphql/050-NetworkPolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: guac-graphql
  labels:
    app.kubernetes.io/name: guac-graphql
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: guac-graphql
      app.kubernetes.io/component: guac
      app.kubernetes.io/instance: trustification
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              "kubernetes.io/metadata.name": xiabai-test
      ports:
        - protocol: TCP
          port: 8080
    - from:
      - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 9010
---
# Source: trustification/templates/services/bombastic/api/020-ConfigMap-auth.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: bombastic-api-auth
  labels:
    app.kubernetes.io/name: bombastic-api-auth
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

data:

 
  auth.yaml: |
    
    authentication:
      clients:
    
        - clientId: frontend
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: &keycloakScopeMappings
            "create:document": [ "create.sbom", "create.vex" ]
            "read:document": [ "read.sbom", "read.vex" ]
            "update:document": [ "update.sbom", "update.vex" ]
            "delete:document": [ "delete.sbom", "delete.vex" ]
    
        - clientId: walker
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: *keycloakScopeMappings
---
# Source: trustification/templates/services/report/020-Configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-server-nginx-config
data:
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    events {
        worker_connections 1024;
    }
    http {
      server {
        listen 8018;
        server_name localhost;

        root /opt/app-root/src;
        index index.html index.htm;

        location / {
            autoindex on;
            try_files $uri $uri/ =404;
        }
      }
    }
---
# Source: trustification/templates/services/spog/api/020-ConfigMap-auth.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: spog-api-auth
  labels:
    app.kubernetes.io/name: spog-api-auth
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

data:

 
  auth.yaml: |
    
    authentication:
      clients:
    
        - clientId: frontend
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: &keycloakScopeMappings
            "create:document": [ "create.sbom", "create.vex" ]
            "read:document": [ "read.sbom", "read.vex" ]
            "update:document": [ "update.sbom", "update.vex" ]
            "delete:document": [ "delete.sbom", "delete.vex" ]
    
        - clientId: walker
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: *keycloakScopeMappings
---
# Source: trustification/templates/services/spog/ui/020-ConfigMap-backend.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: spog-ui-backend
  labels:
    app.kubernetes.io/name: spog-ui-backend
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

data:
---
# Source: trustification/templates/services/v11y/api/020-ConfigMap-auth.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: v11y-api-auth
  labels:
    app.kubernetes.io/name: v11y-api-auth
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

data:

 
  auth.yaml: |
    
    authentication:
      clients:
    
        - clientId: frontend
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: &keycloakScopeMappings
            "create:document": [ "create.sbom", "create.vex" ]
            "read:document": [ "read.sbom", "read.vex" ]
            "update:document": [ "update.sbom", "update.vex" ]
            "delete:document": [ "delete.sbom", "delete.vex" ]
    
        - clientId: walker
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: *keycloakScopeMappings
---
# Source: trustification/templates/services/vexination/api/020-ConfigMap-auth.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: vexination-api-auth
  labels:
    app.kubernetes.io/name: vexination-api-auth
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

data:

 
  auth.yaml: |
    
    authentication:
      clients:
    
        - clientId: frontend
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: &keycloakScopeMappings
            "create:document": [ "create.sbom", "create.vex" ]
            "read:document": [ "read.sbom", "read.vex" ]
            "update:document": [ "update.sbom", "update.vex" ]
            "delete:document": [ "delete.sbom", "delete.vex" ]
    
        - clientId: walker
          issuerUrl: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
          scopeMappings: *keycloakScopeMappings
---
# Source: trustification/templates/services/bombastic/walker/030-CronJob.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: bombastic-walker-redhat
  labels:
    app.kubernetes.io/name: bombastic-walker-redhat
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Mi"
---
# Source: trustification/templates/services/v11y/walker/020-PersistentVolumeClaim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: v11y-walker
  labels:
    app.kubernetes.io/name: v11y-walker
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "10Gi"
---
# Source: trustification/templates/services/vexination/walker/030-CronJob.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: vexination-walker-redhat
  labels:
    app.kubernetes.io/name: vexination-walker-redhat
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Mi"
---
# Source: trustification/templates/services/bombastic/api/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bombastic-api
  labels:
    app.kubernetes.io/name: bombastic-api
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: bombastic-api-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: bombastic-api
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/documentation/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: documentation
  labels:
    app.kubernetes.io/name: documentation
    app.kubernetes.io/component: documentation
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: documentation-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: documentation
    app.kubernetes.io/component: documentation
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/guac/graphql/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: guac-graphql
  labels:
    app.kubernetes.io/name: guac-graphql
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: guac-graphql-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: guac-graphql
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/report/080-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: report-server
  labels:
    app.kubernetes.io/name: report-server
    app.kubernetes.io/component: report
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: report-server-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: report-server
    app.kubernetes.io/component: report
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/spog/api/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spog-api
  labels:
    app.kubernetes.io/name: spog-api
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: spog-api-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: spog-api
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/spog/ui/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spog-ui
  labels:
    app.kubernetes.io/name: spog-ui
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: spog-ui-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: spog-ui
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/v11y/api/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: v11y-api
  labels:
    app.kubernetes.io/name: v11y-api
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: v11y-api-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: v11y-api
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/vexination/api/040-Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vexination-api
  labels:
    app.kubernetes.io/name: vexination-api
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: vexination-api-tls
spec:
  ports:
  - name: endpoint
    port: 443
    protocol: TCP
    targetPort: endpoint
  selector:
    app.kubernetes.io/name: vexination-api
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
  type: ClusterIP
---
# Source: trustification/templates/services/bombastic/api/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bombastic-api
  labels:
    app.kubernetes.io/name: bombastic-api
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bombastic-api
      app.kubernetes.io/component: bombastic
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        
      annotations:
        configHash/auth: 7ef47e80aa670e0faa83da9988bf104b1fb7073d6580c18e8c03bba7c8afc233

    spec:
      

      containers:
        - name: service
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          command: ["/trust"]
          args:
            - "bombastic"
            - "api"
            - "-p"
            - "8080"
            - "--validator"
            - "sbom"

            - "--index-mode"
            - "file"

            - "--auth-configuration"
            - "/etc/config/auth.yaml"

          env:

            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: HTTP_SERVER_BIND_ADDR
              value: "::"
            
            
            - name: HTTP_SERVER_TLS_ENABLED
              value: "true"
            - name: HTTP_SERVER_TLS_KEY_FILE
              value: "/etc/tls/tls.key"
            - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
              value: "/etc/tls/tls.crt"
            
            
            
            - name: OIDC_PROVIDER_CLIENT_ID
              value: "walker"
            - name: OIDC_PROVIDER_CLIENT_SECRET
              value: 5460cc91-4e20-4edd-881c-b15b169f8a79
            
            - name: OIDC_PROVIDER_ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "bombastic"
            
            - name: SWAGGER_UI_OIDC_ISSUER_URL
              value: "https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken"

            - name: INDEX_SYNC_INTERVAL
              value: 1m

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8080
              name: endpoint
              protocol: TCP

          volumeMounts:
            
            - mountPath: /etc/tls
              name: tls
              readOnly: true
            
            
            - name: config-auth
              mountPath: /etc/config/auth.yaml
              subPath: auth.yaml
            
            

      volumes:
        
        - name: tls
          secret:
            secretName: bombastic-api-tls
        
        - name: config-auth
          configMap:
            name: bombastic-api-auth
---
# Source: trustification/templates/services/bombastic/indexer/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bombastic-indexer
  labels:
    app.kubernetes.io/name: bombastic-indexer
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1 # must be one

  strategy:
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: bombastic-indexer
      app.kubernetes.io/component: bombastic
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      labels:
        app.kubernetes.io/name: bombastic-indexer
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        

    spec:
      

      volumes:
        - name: data
          emptyDir: {}
        

      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          command: ["/trust"]
          args:
            - "bombastic"
            - "indexer"

            - "--stored-topic"
            - "sbom-stored"
            - "--indexed-topic"
            - "sbom-indexed"
            - "--failed-topic"
            - "sbom-failed"

            - "--index-mode"
            - "file"
            - "--index-dir"
            - "/data/index"

          env:
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "bombastic"
            
            
            - name: EVENT_BUS
              value: kafka
            
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "infrastructure-kafka:9092"
            
            - name: KAFKA_PROPERTIES_ENV_PREFIX
              value: TCK_
            
            - name: TCK_SECURITY__PROTOCOL
              value: SASL_PLAINTEXT
            
            - name: TCK_SASL__USERNAME
              value: "user1"
            
            - name: TCK_SASL__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-passwords
                  name: infrastructure-kafka-user-passwords
            
            - name: TCK_SASL__MECHANISM
              value: "PLAIN"

            - name: INDEX_WRITER_MEMORY_BYTES
              value: 128MiB
            - name: INDEX_SYNC_INTERVAL
              value: 1m

          volumeMounts:
            - name: data
              mountPath: /data
            

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
---
# Source: trustification/templates/services/documentation/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: documentation
  labels:
    app.kubernetes.io/name: documentation
    app.kubernetes.io/component: documentation
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: documentation
      app.kubernetes.io/component: documentation
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: documentation
        app.kubernetes.io/component: documentation
        app.kubernetes.io/instance: trustification

    spec:
      

      volumes:
        - name: endpoints
          emptyDir: {}
        - name: run
          emptyDir: {}
      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust-docs:latest
          imagePullPolicy: IfNotPresent
          
          resources:
            limits:
              memory: 64Mi
            requests:
              memory: 64Mi
          

          volumeMounts:
            - name: run
              mountPath: /run
          ports:
            - containerPort: 8080
              name: endpoint
              protocol: TCP



          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 2
---
# Source: trustification/templates/services/guac/bombastic-collector/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bombastic-collector
  labels:
    app.kubernetes.io/name: bombastic-collector
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1 # only run one
  strategy:
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: bombastic-collector
      app.kubernetes.io/component: guac
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      labels:
        app.kubernetes.io/name: bombastic-collector
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        

    spec:
      

      containers:
        - name: service
          
          image: ghcr.io/trustification/guac:v0.3.29
          imagePullPolicy: IfNotPresent
          

          command: ["/opt/guac/guacone"]
          args:
            - collect
            - s3
            - --poll

          env:
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: GUAC_S3_URL
              value: "http://infrastructure-minio:9000"
            
            
            - name: GUAC_S3_BUCKET
              value: "bombastic"
            
            
            - name: GUAC_S3_MP
              value: kafka
            
            - name: GUAC_S3_MP_ENDPOINT
              value: "infrastructure-kafka:9092"
            
            - name: KAFKA_PROPERTIES_ENV_PREFIX
              value: TCK_
            
            - name: TCK_SECURITY__PROTOCOL
              value: SASL_PLAINTEXT
            
            - name: TCK_SASL__USERNAME
              value: "user1"
            
            - name: TCK_SASL__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-passwords
                  name: infrastructure-kafka-user-passwords
            
            - name: TCK_SASL__MECHANISM
              value: "PLAIN"

            - name: GUAC_S3_QUEUES
              value: "sbom-indexed"

            - name: GUAC_GQL_ADDR
              value: https://guac-graphql.xiabai-test.svc.cluster.local/query
            - name: GUAC_CSUB_ADDR
              value: guac-collectsub.xiabai-test.svc.cluster.local:2782
            
            - name: GUAC_CSUB_TLS_ROOT_CA
              value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            - name: GUAC_GQL_TLS_ROOT_CA
              value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt

          volumeMounts:
            

      volumes:
---
# Source: trustification/templates/services/guac/graphql/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guac-graphql
  labels:
    app.kubernetes.io/name: guac-graphql
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: guac-graphql
      app.kubernetes.io/component: guac
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        

    spec:
      

      initContainers:
        - name: migrate
          
          image: ghcr.io/trustification/guac:v0.3.29
          imagePullPolicy: IfNotPresent
          

          command: [ "/bin/sh" ]
          args:
            - -ec
            - |
              TC_PGOPTIONS="?"
              TC_PGOPTIONS="${TC_PGOPTIONS}sslmode=${TC_PGSSLMODE}&"
              exec /opt/guac/guacmigrate "--db-address" "postgres://${TC_PGUSER}:${TC_PGPASSWORD}@${TC_PGHOST}:${TC_PGPORT}/${TC_PGDATABASE}${TC_PGOPTIONS}" "--db-driver" "postgres" "--db-debug" "true"

          env:
            
            - name: TC_PGHOST
              value: "infrastructure-postgresql"
            - name: TC_PGPORT
              value: "5432"
            - name: TC_PGDATABASE
              value: "guac"
            - name: TC_PGUSER
              value: "postgres"
            - name: TC_PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: infrastructure-postgresql
            
            
            - name: TC_PGSSLMODE
              value: disable

          volumeMounts:
            

      containers:
        - name: service
          
          image: ghcr.io/trustification/guac:v0.3.29
          imagePullPolicy: IfNotPresent
          

          command: ["/bin/sh"]

          # not sure why --db-migrate=false has to be a single argument, but it won't work otherwise
          args:
            - -ec
            - |
              TC_PGOPTIONS="?"
              TC_PGOPTIONS="${TC_PGOPTIONS}sslmode=${TC_PGSSLMODE}&"
              exec /opt/guac/guacgql "--gql-backend" "ent" "--db-address" "postgres://${TC_PGUSER}:${TC_PGPASSWORD}@${TC_PGHOST}:${TC_PGPORT}/${TC_PGDATABASE}${TC_PGOPTIONS}" "--db-driver" "postgres" "--db-migrate=false"

          workingDir: "/guac"
          env:
            
            - name: TC_PGHOST
              value: "infrastructure-postgresql"
            - name: TC_PGPORT
              value: "5432"
            - name: TC_PGDATABASE
              value: "guac"
            - name: TC_PGUSER
              value: "guac"
            - name: TC_PGPASSWORD
              value: "guac1234"
            
            
            - name: TC_PGSSLMODE
              value: disable
            
            - name: GUAC_GQL_TLS_CERT_FILE
              value: /etc/tls/tls.crt
            - name: GUAC_GQL_TLS_KEY_FILE
              value: /etc/tls/tls.key
            - name: GUAC_PROMETHEUS_ADDR
              value: "9010"

          volumeMounts:
            
            - mountPath: /etc/tls
              name: tls
              readOnly: true
            
            

          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTPS

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8080
              protocol: TCP
              name: endpoint

      volumes:
        
        - name: tls
          secret:
            secretName: guac-graphql-tls
---
# Source: trustification/templates/services/guac/vexination-collector/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vexination-collector
  labels:
    app.kubernetes.io/name: vexination-collector
    app.kubernetes.io/component: guac
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1 # only run one
  strategy:
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: vexination-collector
      app.kubernetes.io/component: guac
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      labels:
        app.kubernetes.io/name: vexination-collector
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        

    spec:
      

      containers:
        - name: service
          
          image: ghcr.io/trustification/guac:v0.3.29
          imagePullPolicy: IfNotPresent
          

          command: ["/opt/guac/guacone"]
          args:
            - collect
            - s3
            - --poll

          env:
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: GUAC_S3_URL
              value: "http://infrastructure-minio:9000"
            
            
            - name: GUAC_S3_BUCKET
              value: "vexination"
            
            
            - name: GUAC_S3_MP
              value: kafka
            
            - name: GUAC_S3_MP_ENDPOINT
              value: "infrastructure-kafka:9092"
            
            - name: KAFKA_PROPERTIES_ENV_PREFIX
              value: TCK_
            
            - name: TCK_SECURITY__PROTOCOL
              value: SASL_PLAINTEXT
            
            - name: TCK_SASL__USERNAME
              value: "user1"
            
            - name: TCK_SASL__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-passwords
                  name: infrastructure-kafka-user-passwords
            
            - name: TCK_SASL__MECHANISM
              value: "PLAIN"

            - name: GUAC_S3_QUEUES
              value: "vex-indexed"

            - name: GUAC_GQL_ADDR
              value: https://guac-graphql.xiabai-test.svc.cluster.local/query
            - name: GUAC_CSUB_ADDR
              value: guac-collectsub.xiabai-test.svc.cluster.local:2782
            
            - name: GUAC_CSUB_TLS_ROOT_CA
              value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            - name: GUAC_GQL_TLS_ROOT_CA
              value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt

          volumeMounts:
            

      volumes:
---
# Source: trustification/templates/services/report/060-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-server
  labels:
    app.kubernetes.io/name: report-server
    app.kubernetes.io/component: report
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: report-server
      app.kubernetes.io/component: report
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        report: "server"
        app.kubernetes.io/name: report-server
        app.kubernetes.io/component: report
        app.kubernetes.io/instance: trustification
        

    spec:
      

      containers:
        - name: report
          image: registry.access.redhat.com/ubi8/nginx-122
          imagePullPolicy: IfNotPresent

          command: [ "/usr/sbin/nginx" ]
          args: [ "-g", "daemon off;" ]
          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8018
              name: endpoint
              protocol: TCP

          volumeMounts:
            - name: wwwdata
              mountPath: /opt/app-root/src

            - name: config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true

      volumes:
        - name: wwwdata
          persistentVolumeClaim:
            claimName: report-server
        - name: config-volume
          configMap:
              name: report-server-nginx-config
---
# Source: trustification/templates/services/spog/api/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spog-api
  labels:
    app.kubernetes.io/name: spog-api
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spog-api
      app.kubernetes.io/component: spog
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        
      annotations:
        configHash/auth: 7ef47e80aa670e0faa83da9988bf104b1fb7073d6580c18e8c03bba7c8afc233
        configHash/ui: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b

    spec:
      

      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          command: ["/trust"]
          args:
            - "spog"
            - "api"
            - "-p"
            - "8080"
            - "--bombastic-url"
            - "https://bombastic-api.xiabai-test.svc.cluster.local"
            - "--vexination-url"
            - "https://vexination-api.xiabai-test.svc.cluster.local"
            - "--collectorist-url"
            - "https://collectorist-api.xiabai-test.svc.cluster.local"
            - "--v11y-url"
            - "https://v11y-api.xiabai-test.svc.cluster.local"
            - "--exhort-url"
            - "https://exhort-api.xiabai-test.svc.cluster.local"
            - "--crda-url"
            - "https://rhda.rhcloud.com/api/v4/analysis"
            - "--guac"
            - "https://guac-graphql.xiabai-test.svc.cluster.local/query"
            - "--auth-configuration"
            - "/etc/config/auth.yaml"
          env:

            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: HTTP_SERVER_BIND_ADDR
              value: "::"
            
            
            - name: HTTP_SERVER_TLS_ENABLED
              value: "true"
            - name: HTTP_SERVER_TLS_KEY_FILE
              value: "/etc/tls/tls.key"
            - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
              value: "/etc/tls/tls.crt"
            
            
            
            - name: OIDC_PROVIDER_CLIENT_ID
              value: "walker"
            - name: OIDC_PROVIDER_CLIENT_SECRET
              value: 5460cc91-4e20-4edd-881c-b15b169f8a79
            
            - name: OIDC_PROVIDER_ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            
            - name: SWAGGER_UI_OIDC_ISSUER_URL
              value: "https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken"

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8080
              name: endpoint
              protocol: TCP

          volumeMounts:
            
            - mountPath: /etc/tls
              name: tls
              readOnly: true
            
            
            - name: config-auth
              mountPath: /etc/config/auth.yaml
              subPath: auth.yaml
            
            

      volumes:
        
        - name: tls
          secret:
            secretName: spog-api-tls
        
        - name: config-auth
          configMap:
            name: spog-api-auth
---
# Source: trustification/templates/services/spog/ui/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spog-ui
  labels:
    app.kubernetes.io/name: spog-ui
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spog-ui
      app.kubernetes.io/component: spog
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      annotations:
        configHash/backend: 8e1d3ac714380685ea3b7be91aa42579d92a4a405036daf65291a80892c7d185

      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        

    spec:
      

      volumes:
        - name: endpoints
          emptyDir: {}
        - name: run
          emptyDir: {}
        - name: config
          configMap:
            optional: true
            name: spog-ui-backend
        

      containers:
        - name: service
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          resources:
            limits:
              memory: 64Mi
            requests:
              memory: 64Mi
          

          command: ["/nginx.sh"]
          env:
            - name: API_URL
              value: https://api-xiabai-test.apps.scale.scale.trustification.cloud
            - name: BOMBASTIC_URL
              value: https://sbom-xiabai-test.apps.scale.scale.trustification.cloud
            - name: VEXINATION_URL
              value: https://vex-xiabai-test.apps.scale.scale.trustification.cloud
            - name: ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            - name: CLIENT_ID
              value: frontend

            - name: BACKEND_JSON_FILE
              value: /etc/config/backend.json

          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true

            - name: endpoints
              mountPath: /endpoints
            - name: run
              mountPath: /run
            

          ports:
            - containerPort: 8080
              name: endpoint
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 2
---
# Source: trustification/templates/services/v11y/api/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: v11y-api
  labels:
    app.kubernetes.io/name: v11y-api
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: v11y-api
      app.kubernetes.io/component: v11y
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        
      annotations:
        configHash/auth: 7ef47e80aa670e0faa83da9988bf104b1fb7073d6580c18e8c03bba7c8afc233

    spec:
      

      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          command: ["/trust"]
          args:
            - "v11y"
            - "api"
            - "-p"
            - "8080"

            - "--index-mode"
            - "file"

            - "--auth-configuration"
            - "/etc/config/auth.yaml"

          env:

            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: HTTP_SERVER_BIND_ADDR
              value: "::"
            
            
            - name: HTTP_SERVER_TLS_ENABLED
              value: "true"
            - name: HTTP_SERVER_TLS_KEY_FILE
              value: "/etc/tls/tls.key"
            - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
              value: "/etc/tls/tls.crt"
            
            
            
            - name: OIDC_PROVIDER_CLIENT_ID
              value: "walker"
            - name: OIDC_PROVIDER_CLIENT_SECRET
              value: 5460cc91-4e20-4edd-881c-b15b169f8a79
            
            - name: OIDC_PROVIDER_ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "v11y"

            - name: INDEX_SYNC_INTERVAL
              value: 1m

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8080
              name: endpoint
              protocol: TCP

          volumeMounts:
            
            - mountPath: /etc/tls
              name: tls
              readOnly: true
            
            
            - name: config-auth
              mountPath: /etc/config/auth.yaml
              subPath: auth.yaml
            
            

      volumes:
        
        - name: tls
          secret:
            secretName: v11y-api-tls
        
        - name: config-auth
          configMap:
            name: v11y-api-auth
---
# Source: trustification/templates/services/v11y/indexer/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: v11y-indexer
  labels:
    app.kubernetes.io/name: v11y-indexer
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    
spec:
  replicas: 1 # must be one

  strategy:
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: v11y-indexer
      app.kubernetes.io/component: v11y
      app.kubernetes.io/instance: trustification

  template:
    metadata:
      labels:
        app.kubernetes.io/name: v11y-indexer
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        

    spec:
      

      volumes:
        - name: data
          emptyDir: {}
        

      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          command: ["/trust"]
          args:
            - "v11y"
            - "indexer"

            - "--stored-topic"
            - "v11y-stored"
            - "--indexed-topic"
            - "v11y-indexed"
            - "--failed-topic"
            - "v11y-failed"

            - "--index-mode"
            - "file"
            - "--index-dir"
            - "/data/index"

          env:
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "v11y"
            
            
            - name: EVENT_BUS
              value: kafka
            
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "infrastructure-kafka:9092"
            
            - name: KAFKA_PROPERTIES_ENV_PREFIX
              value: TCK_
            
            - name: TCK_SECURITY__PROTOCOL
              value: SASL_PLAINTEXT
            
            - name: TCK_SASL__USERNAME
              value: "user1"
            
            - name: TCK_SASL__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-passwords
                  name: infrastructure-kafka-user-passwords
            
            - name: TCK_SASL__MECHANISM
              value: "PLAIN"

            - name: INDEX_WRITER_MEMORY_BYTES
              value: 128MiB
            - name: INDEX_SYNC_INTERVAL
              value: 1m

          volumeMounts:
            - name: data
              mountPath: /data
            

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
---
# Source: trustification/templates/services/vexination/api/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vexination-api
  labels:
    app.kubernetes.io/name: vexination-api
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vexination-api
      app.kubernetes.io/component: vexination
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        
      annotations:
        configHash/auth: 7ef47e80aa670e0faa83da9988bf104b1fb7073d6580c18e8c03bba7c8afc233

    spec:
      

      containers:
        - name: service
          
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          command: ["/trust"]
          args:
            - "vexination"
            - "api"
            - "-p"
            - "8080"

            - "--index-mode"
            - "file"

            - "--auth-configuration"
            - "/etc/config/auth.yaml"

          env:

            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: HTTP_SERVER_BIND_ADDR
              value: "::"
            
            
            - name: HTTP_SERVER_TLS_ENABLED
              value: "true"
            - name: HTTP_SERVER_TLS_KEY_FILE
              value: "/etc/tls/tls.key"
            - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
              value: "/etc/tls/tls.crt"
            
            
            
            - name: OIDC_PROVIDER_CLIENT_ID
              value: "walker"
            - name: OIDC_PROVIDER_CLIENT_SECRET
              value: 5460cc91-4e20-4edd-881c-b15b169f8a79
            
            - name: OIDC_PROVIDER_ISSUER_URL
              value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "vexination"
            
            - name: SWAGGER_UI_OIDC_ISSUER_URL
              value: "https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken"

            - name: INDEX_SYNC_INTERVAL
              value: 1m

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
            - containerPort: 8080
              name: endpoint
              protocol: TCP
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010

          volumeMounts:
            
            - mountPath: /etc/tls
              name: tls
              readOnly: true
            
            
            - name: config-auth
              mountPath: /etc/config/auth.yaml
              subPath: auth.yaml
            
            

      volumes:
        
        - name: tls
          secret:
            secretName: vexination-api-tls
        
        - name: config-auth
          configMap:
            name: vexination-api-auth
---
# Source: trustification/templates/services/vexination/indexer/030-Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vexination-indexer
  labels:
    app.kubernetes.io/name: vexination-indexer
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    
    
spec:

  replicas: 1 # must be one

  strategy:
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: vexination-indexer
      app.kubernetes.io/component: vexination
      app.kubernetes.io/instance: trustification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vexination-indexer
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        
    spec:
      

      volumes:
        - name: data
          emptyDir: {}
        

      containers:
        - name: service
          
          image: ghcr.io/bxf12315/trust:latest
          imagePullPolicy: IfNotPresent
          command: ["/trust"]
          args:
            - "vexination"
            - "indexer"

            - "--stored-topic"
            - "vex-stored"
            - "--indexed-topic"
            - "vex-indexed"
            - "--failed-topic"
            - "vex-failed"

            - "--index-mode"
            - "file"
            - "--index-dir"
            - "/data/index"

          env:
            
            - name: RUST_LOG
              value: "info"
            
            - name: INFRASTRUCTURE_ENABLED
              value: "true"
            - name: INFRASTRUCTURE_BIND
              value: "[::]:9010"
            - name: STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: infrastructure-minio
            
            - name: STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: infrastructure-minio
            
            
            - name: STORAGE_ENDPOINT
              value: "http://infrastructure-minio:9000"
            - name: STORAGE_REGION
              value: "eu-west-1" # just a dummy value
            
            
            - name: STORAGE_BUCKET
              value: "vexination"
            
            
            - name: EVENT_BUS
              value: kafka
            
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "infrastructure-kafka:9092"
            
            - name: KAFKA_PROPERTIES_ENV_PREFIX
              value: TCK_
            
            - name: TCK_SECURITY__PROTOCOL
              value: SASL_PLAINTEXT
            
            - name: TCK_SASL__USERNAME
              value: "user1"
            
            - name: TCK_SASL__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-passwords
                  name: infrastructure-kafka-user-passwords
            
            - name: TCK_SASL__MECHANISM
              value: "PLAIN"

            - name: INDEX_WRITER_MEMORY_BYTES
              value: 128MiB
            - name: INDEX_SYNC_INTERVAL
              value: 1m

          volumeMounts:
            - name: data
              mountPath: /data
            

          ports:
            
            - containerPort: 9010
              protocol: TCP
              name: infra
          
          
          livenessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/live
              port: 9010
          
          readinessProbe:
            initialDelaySeconds: 2
            httpGet:
              path: /health/ready
              port: 9010
---
# Source: trustification/templates/services/bombastic/walker/030-CronJob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bombastic-walker-redhat
  labels:
    app.kubernetes.io/name: bombastic-walker-redhat
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    source: "https://access.redhat.com/security/data/sbom/beta/"

spec:
  schedule: "0 * * * *"
  suspend: false
  concurrencyPolicy: Forbid

  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-walker-redhat
            app.kubernetes.io/component: bombastic
            app.kubernetes.io/instance: trustification

        spec:
          

          restartPolicy: OnFailure

          containers:
            - name: walker
              
              image: ghcr.io/bxf12315/trust:latest
              imagePullPolicy: IfNotPresent
              
              
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010

              command: ["/trust"]
              args:
                - "bombastic"
                - "walker"
                - "--sink"
                - "https://bombastic-api.xiabai-test.svc.cluster.local"
                - "--source"
                - "https://access.redhat.com/security/data/sbom/beta/"
                - "--since-file"
                - "/walker-state/since"
                - --sender-root-certificates
                - /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                - "-3"
                - "--signing-key"
                - "https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4"
                - "--fix-licenses"
                - "true"

              env:
                - name: REPORT_PATH
                  value: "/tmp/share/reports"
                
                - name: RUST_LOG
                  value: "info"
                
                - name: INFRASTRUCTURE_ENABLED
                  value: "true"
                - name: INFRASTRUCTURE_BIND
                  value: "[::]:9010"
                
                
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: "walker"
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  value: 5460cc91-4e20-4edd-881c-b15b169f8a79
                
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken

              ports:
                
                - containerPort: 9010
                  protocol: TCP
                  name: infra

              volumeMounts:
                - name: report-path
                  mountPath: /tmp/share/reports

                - mountPath: /walker-state
                  name: walker-state
                

          volumes:
            - name: report-path
              persistentVolumeClaim:
                claimName: report-server

            - name: walker-state
              persistentVolumeClaim:
                claimName: bombastic-walker-redhat
            

          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: report
                        operator: In
                        values:
                          - server
                  topologyKey: "kubernetes.io/hostname"
---
# Source: trustification/templates/services/v11y/walker/030-CronJob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: v11y-walker
  labels:
    app.kubernetes.io/name: v11y-walker
    app.kubernetes.io/component: v11y
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    

spec:
  schedule: "0 1 * * *"
  suspend: false
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: v11y-walker
            app.kubernetes.io/component: v11y
            app.kubernetes.io/instance: trustification

        spec:
          

          restartPolicy: Never
          volumes:
            - name: cvelist
              persistentVolumeClaim:
                claimName: v11y-walker
            

          initContainers:
            - name: git-fetch
              
              image: ghcr.io/bxf12315/trust:latest
              imagePullPolicy: IfNotPresent
              

              volumeMounts:
                - mountPath: /git
                  name: cvelist

              command: ["/bin/sh"]
              workingDir: /git
              args:
                - "-ec"
                - |
                  if test -d cvelistV5; then
                    cd cvelistV5
                    git pull
                  else
                    git clone https://github.com/CVEProject/cvelistV5
                  fi

          containers:
            - name: walker
              
              image: ghcr.io/bxf12315/trust:latest
              imagePullPolicy: IfNotPresent
              
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
          

              volumeMounts:
                - mountPath: /mnt
                  name: cvelist
                

              command: ["/trust"]
              args:
                - "v11y"
                - "walker"
                - "--source"
                - "/mnt/cvelistV5"

              
                - "--delta-file"
                - "/mnt/last-delta"
              

              env:
                
                - name: RUST_LOG
                  value: "info"
                
                - name: INFRASTRUCTURE_ENABLED
                  value: "true"
                - name: INFRASTRUCTURE_BIND
                  value: "[::]:9010"
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: root-user
                      name: infrastructure-minio
                
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: root-password
                      name: infrastructure-minio
                
                
                - name: STORAGE_ENDPOINT
                  value: "http://infrastructure-minio:9000"
                - name: STORAGE_REGION
                  value: "eu-west-1" # just a dummy value
                
                
                - name: STORAGE_BUCKET
                  value: "v11y"

              ports:
                
                - containerPort: 9010
                  protocol: TCP
                  name: infra
---
# Source: trustification/templates/services/vexination/walker/030-CronJob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vexination-walker-redhat
  labels:
    app.kubernetes.io/name: vexination-walker-redhat
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    source: "https://www.redhat.com/.well-known/csaf/provider-metadata.json"

spec:
  schedule: "0 * * * *"
  suspend: false
  concurrencyPolicy: Forbid

  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-walker-redhat
            app.kubernetes.io/component: vexination
            app.kubernetes.io/instance: trustification

        spec:
          

          restartPolicy: OnFailure

          containers:
            - name: walker
              
              image: ghcr.io/bxf12315/trust:latest
              imagePullPolicy: IfNotPresent

              command: ["/trust"]
              args:
                - "vexination"
                - "walker"
                - "--sink"
                - "https://vexination-api.xiabai-test.svc.cluster.local/api/v1/vex"
                - "--source"
                - "https://www.redhat.com/.well-known/csaf/provider-metadata.json"
                - "--since-file"
                - "/walker-state/since"
                - --sender-root-certificates
                - /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                - "-3"
                - "--ignore-distributions"
                - "https://access.redhat.com/security/data/csaf/v2/advisories/"

              env:
                - name: REPORT_PATH
                  value: "/tmp/share/reports"
                
                - name: RUST_LOG
                  value: "info"
                
                - name: INFRASTRUCTURE_ENABLED
                  value: "true"
                - name: INFRASTRUCTURE_BIND
                  value: "[::]:9010"
                
                
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: "walker"
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  value: 5460cc91-4e20-4edd-881c-b15b169f8a79
                
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: https://sso-xiabai-test.apps.scale.scale.trustification.cloud/realms/chicken

              ports:
                
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              
              
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010

              volumeMounts:
                - name: report-path
                  mountPath: /tmp/share/reports

                - mountPath: /walker-state
                  name: walker-state
                

          volumes:
            - name: report-path
              persistentVolumeClaim:
                claimName: report-server

            - name: walker-state
              persistentVolumeClaim:
                claimName: vexination-walker-redhat
            

          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: report
                        operator: In
                        values:
                          - server
                  topologyKey: "kubernetes.io/hostname"
---
# Source: trustification/templates/services/bombastic/api/050-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bombastic-api
  labels:
    app.kubernetes.io/name: bombastic-api
    app.kubernetes.io/component: bombastic
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: reencrypt

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "sbom-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: bombastic-api
                port:
                  name: endpoint
---
# Source: trustification/templates/services/documentation/050-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: documentation
  labels:
    app.kubernetes.io/name: documentation
    app.kubernetes.io/component: documentation
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: edge

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "docs-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: documentation
                port:
                  name: endpoint
---
# Source: trustification/templates/services/report/070-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: report-server
  labels:
    app.kubernetes.io/name: report-server
    app.kubernetes.io/component: report
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: edge

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "report-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: report-server
                port:
                  name: endpoint
---
# Source: trustification/templates/services/spog/api/050-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spog-api
  labels:
    app.kubernetes.io/name: spog-api
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: reencrypt

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "api-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: spog-api
                port:
                  name: endpoint
---
# Source: trustification/templates/services/spog/ui/050-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spog-ui
  labels:
    app.kubernetes.io/name: spog-ui
    app.kubernetes.io/component: spog
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: edge

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "console-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: spog-ui
                port:
                  name: endpoint
---
# Source: trustification/templates/services/vexination/api/050-Ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vexination-api
  labels:
    app.kubernetes.io/name: vexination-api
    app.kubernetes.io/component: vexination
    app.kubernetes.io/instance: trustification
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "trustification"
    
  annotations:
    route.openshift.io/termination: reencrypt

spec:
  
  ingressClassName: "openshift-default"
  rules:
    - host: "vex-xiabai-test.apps.scale.scale.trustification.cloud"
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: vexination-api
                port:
                  name: endpoint

NOTES:
OpenShift:
  Detected:       true
  Use Service CA: true
